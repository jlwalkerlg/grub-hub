// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Web.Data.EF;

namespace Web.Data.EF.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210512094141_RenameBillingAccountsBillingEnabledColumn")]
    partial class RenameBillingAccountsBillingEnabledColumn
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Web.Data.EF.Configurations.RestaurantCuisine", b =>
                {
                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid")
                        .HasColumnName("restaurant_id");

                    b.Property<string>("CuisineName")
                        .HasColumnType("text")
                        .HasColumnName("cuisine_name");

                    b.HasKey("RestaurantId", "CuisineName");

                    b.HasIndex("CuisineName");

                    b.ToTable("restaurant_cuisines");
                });

            modelBuilder.Entity("Web.Domain.Baskets.Basket", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid")
                        .HasColumnName("restaurant_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId", "RestaurantId")
                        .IsUnique();

                    b.ToTable("baskets");
                });

            modelBuilder.Entity("Web.Domain.Baskets.BasketItem", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Guid>("MenuItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("menu_item_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<int?>("basket_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("basket_id");

                    b.ToTable("basket_items");
                });

            modelBuilder.Entity("Web.Domain.Billing.BillingAccount", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.HasKey("Id");

                    b.ToTable("billing_accounts");
                });

            modelBuilder.Entity("Web.Domain.Cuisines.Cuisine", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Name");

                    b.ToTable("cuisines");
                });

            modelBuilder.Entity("Web.Domain.Menus.Menu", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid")
                        .HasColumnName("restaurant_id");

                    b.HasKey("id");

                    b.HasIndex("RestaurantId")
                        .IsUnique();

                    b.ToTable("menus");
                });

            modelBuilder.Entity("Web.Domain.Menus.MenuCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool>("isDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<int>("menu_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("menu_id");

                    b.ToTable("menu_categories");
                });

            modelBuilder.Entity("Web.Domain.Menus.MenuItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(280)
                        .HasColumnType("character varying(280)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("price");

                    b.Property<bool>("isDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("menu_category_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("menu_category_id");

                    b.ToTable("menu_items");
                });

            modelBuilder.Entity("Web.Domain.Orders.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("AcceptedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("accepted_at");

                    b.Property<DateTimeOffset?>("CancelledAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("cancelled_at");

                    b.Property<DateTimeOffset?>("ConfirmedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("confirmed_at");

                    b.Property<DateTimeOffset?>("DeliveredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delivered_at");

                    b.Property<int>("DeliveryFee")
                        .HasColumnType("integer")
                        .HasColumnName("delivery_fee");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("mobile_number");

                    b.Property<string>("PaymentIntentClientSecret")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payment_intent_client_secret");

                    b.Property<string>("PaymentIntentId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payment_intent_id");

                    b.Property<DateTimeOffset>("PlacedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("placed_at");

                    b.Property<DateTimeOffset?>("RejectedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("rejected_at");

                    b.Property<Guid?>("RestaurantId")
                        .HasColumnType("uuid")
                        .HasColumnName("restaurant_id");

                    b.Property<int>("ServiceFee")
                        .HasColumnType("integer")
                        .HasColumnName("service_fee");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int>("number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("number")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("Web.Domain.Orders.OrderItem", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Guid>("MenuItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("menu_item_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<string>("order_id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("order_id");

                    b.ToTable("order_items");
                });

            modelBuilder.Entity("Web.Domain.Restaurants.Restaurant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Banner")
                        .HasColumnType("text")
                        .HasColumnName("banner");

                    b.Property<string>("BillingAccountId")
                        .HasColumnType("text")
                        .HasColumnName("billing_account_id");

                    b.Property<int>("DeliveryFee")
                        .HasColumnType("integer")
                        .HasColumnName("delivery_fee");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("description");

                    b.Property<int>("EstimatedDeliveryTimeInMinutes")
                        .HasColumnType("integer")
                        .HasColumnName("estimated_delivery_time_in_minutes");

                    b.Property<Guid>("ManagerId")
                        .HasColumnType("uuid")
                        .HasColumnName("manager_id");

                    b.Property<float>("MaxDeliveryDistance")
                        .HasColumnType("real")
                        .HasColumnName("max_delivery_distance_in_km");

                    b.Property<int>("MinimumDeliverySpend")
                        .HasColumnType("integer")
                        .HasColumnName("minimum_delivery_spend");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("text")
                        .HasColumnName("thumbnail");

                    b.HasKey("Id");

                    b.HasIndex("BillingAccountId");

                    b.HasIndex("ManagerId")
                        .IsUnique();

                    b.ToTable("restaurants");
                });

            modelBuilder.Entity("Web.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("text")
                        .HasColumnName("mobile_number");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("users");

                    b.HasDiscriminator<string>("role").HasValue("User");
                });

            modelBuilder.Entity("Web.Domain.Users.Customer", b =>
                {
                    b.HasBaseType("Web.Domain.Users.User");

                    b.HasDiscriminator().HasValue("Customer");
                });

            modelBuilder.Entity("Web.Domain.Users.RestaurantManager", b =>
                {
                    b.HasBaseType("Web.Domain.Users.User");

                    b.HasDiscriminator().HasValue("RestaurantManager");
                });

            modelBuilder.Entity("Web.Data.EF.Configurations.RestaurantCuisine", b =>
                {
                    b.HasOne("Web.Domain.Cuisines.Cuisine", "Cuisine")
                        .WithMany()
                        .HasForeignKey("CuisineName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web.Domain.Restaurants.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cuisine");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Web.Domain.Baskets.Basket", b =>
                {
                    b.HasOne("Web.Domain.Restaurants.Restaurant", null)
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Web.Domain.Baskets.BasketItem", b =>
                {
                    b.HasOne("Web.Domain.Menus.MenuItem", null)
                        .WithMany()
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web.Domain.Baskets.Basket", null)
                        .WithMany("Items")
                        .HasForeignKey("basket_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Domain.Menus.Menu", b =>
                {
                    b.HasOne("Web.Domain.Restaurants.Restaurant", null)
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Web.Domain.Menus.MenuCategory", b =>
                {
                    b.HasOne("Web.Domain.Menus.Menu", null)
                        .WithMany("Categories")
                        .HasForeignKey("menu_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Web.Domain.Menus.MenuItem", b =>
                {
                    b.HasOne("Web.Domain.Menus.MenuCategory", null)
                        .WithMany("Items")
                        .HasForeignKey("menu_category_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Web.Domain.Orders.Order", b =>
                {
                    b.HasOne("Web.Domain.Restaurants.Restaurant", null)
                        .WithMany()
                        .HasForeignKey("RestaurantId");

                    b.HasOne("Web.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.OwnsOne("Web.Domain.Address", "Address", b1 =>
                        {
                            b1.Property<string>("OrderId")
                                .HasColumnType("text");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("city");

                            b1.Property<string>("Line1")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_line1");

                            b1.Property<string>("Line2")
                                .HasColumnType("text")
                                .HasColumnName("address_line2");

                            b1.Property<string>("Postcode")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("postcode");

                            b1.HasKey("OrderId");

                            b1.ToTable("orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Web.Domain.Orders.OrderItem", b =>
                {
                    b.HasOne("Web.Domain.Menus.MenuItem", null)
                        .WithMany()
                        .HasForeignKey("MenuItemId")
                        .IsRequired();

                    b.HasOne("Web.Domain.Orders.Order", null)
                        .WithMany("Items")
                        .HasForeignKey("order_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Web.Domain.Restaurants.Restaurant", b =>
                {
                    b.HasOne("Web.Domain.Billing.BillingAccount", null)
                        .WithMany()
                        .HasForeignKey("BillingAccountId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Web.Domain.Users.RestaurantManager", null)
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Web.Domain.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("city");

                            b1.Property<string>("Line1")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_line1");

                            b1.Property<string>("Line2")
                                .HasColumnType("text")
                                .HasColumnName("address_line2");

                            b1.Property<string>("Postcode")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("postcode");

                            b1.HasKey("RestaurantId");

                            b1.ToTable("restaurants");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");
                        });

                    b.OwnsOne("Web.Domain.Coordinates", "Coordinates", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId")
                                .HasColumnType("uuid");

                            b1.Property<float>("Latitude")
                                .HasColumnType("real")
                                .HasColumnName("latitude");

                            b1.Property<float>("Longitude")
                                .HasColumnType("real")
                                .HasColumnName("longitude");

                            b1.HasKey("RestaurantId");

                            b1.ToTable("restaurants");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");
                        });

                    b.OwnsOne("Web.Domain.Restaurants.OpeningTimes", "OpeningTimes", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId")
                                .HasColumnType("uuid");

                            b1.HasKey("RestaurantId");

                            b1.ToTable("restaurants");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.OwnsOne("Web.Domain.Restaurants.OpeningHours", "Friday", b2 =>
                                {
                                    b2.Property<Guid>("OpeningTimesRestaurantId")
                                        .HasColumnType("uuid");

                                    b2.Property<TimeSpan?>("Close")
                                        .HasColumnType("interval")
                                        .HasColumnName("friday_close");

                                    b2.Property<TimeSpan>("Open")
                                        .HasColumnType("interval")
                                        .HasColumnName("friday_open");

                                    b2.HasKey("OpeningTimesRestaurantId");

                                    b2.ToTable("restaurants");

                                    b2.WithOwner()
                                        .HasForeignKey("OpeningTimesRestaurantId");
                                });

                            b1.OwnsOne("Web.Domain.Restaurants.OpeningHours", "Monday", b2 =>
                                {
                                    b2.Property<Guid>("OpeningTimesRestaurantId")
                                        .HasColumnType("uuid");

                                    b2.Property<TimeSpan?>("Close")
                                        .HasColumnType("interval")
                                        .HasColumnName("monday_close");

                                    b2.Property<TimeSpan>("Open")
                                        .HasColumnType("interval")
                                        .HasColumnName("monday_open");

                                    b2.HasKey("OpeningTimesRestaurantId");

                                    b2.ToTable("restaurants");

                                    b2.WithOwner()
                                        .HasForeignKey("OpeningTimesRestaurantId");
                                });

                            b1.OwnsOne("Web.Domain.Restaurants.OpeningHours", "Saturday", b2 =>
                                {
                                    b2.Property<Guid>("OpeningTimesRestaurantId")
                                        .HasColumnType("uuid");

                                    b2.Property<TimeSpan?>("Close")
                                        .HasColumnType("interval")
                                        .HasColumnName("saturday_close");

                                    b2.Property<TimeSpan>("Open")
                                        .HasColumnType("interval")
                                        .HasColumnName("saturday_open");

                                    b2.HasKey("OpeningTimesRestaurantId");

                                    b2.ToTable("restaurants");

                                    b2.WithOwner()
                                        .HasForeignKey("OpeningTimesRestaurantId");
                                });

                            b1.OwnsOne("Web.Domain.Restaurants.OpeningHours", "Sunday", b2 =>
                                {
                                    b2.Property<Guid>("OpeningTimesRestaurantId")
                                        .HasColumnType("uuid");

                                    b2.Property<TimeSpan?>("Close")
                                        .HasColumnType("interval")
                                        .HasColumnName("sunday_close");

                                    b2.Property<TimeSpan>("Open")
                                        .HasColumnType("interval")
                                        .HasColumnName("sunday_open");

                                    b2.HasKey("OpeningTimesRestaurantId");

                                    b2.ToTable("restaurants");

                                    b2.WithOwner()
                                        .HasForeignKey("OpeningTimesRestaurantId");
                                });

                            b1.OwnsOne("Web.Domain.Restaurants.OpeningHours", "Thursday", b2 =>
                                {
                                    b2.Property<Guid>("OpeningTimesRestaurantId")
                                        .HasColumnType("uuid");

                                    b2.Property<TimeSpan?>("Close")
                                        .HasColumnType("interval")
                                        .HasColumnName("thursday_close");

                                    b2.Property<TimeSpan>("Open")
                                        .HasColumnType("interval")
                                        .HasColumnName("thursday_open");

                                    b2.HasKey("OpeningTimesRestaurantId");

                                    b2.ToTable("restaurants");

                                    b2.WithOwner()
                                        .HasForeignKey("OpeningTimesRestaurantId");
                                });

                            b1.OwnsOne("Web.Domain.Restaurants.OpeningHours", "Tuesday", b2 =>
                                {
                                    b2.Property<Guid>("OpeningTimesRestaurantId")
                                        .HasColumnType("uuid");

                                    b2.Property<TimeSpan?>("Close")
                                        .HasColumnType("interval")
                                        .HasColumnName("tuesday_close");

                                    b2.Property<TimeSpan>("Open")
                                        .HasColumnType("interval")
                                        .HasColumnName("tuesday_open");

                                    b2.HasKey("OpeningTimesRestaurantId");

                                    b2.ToTable("restaurants");

                                    b2.WithOwner()
                                        .HasForeignKey("OpeningTimesRestaurantId");
                                });

                            b1.OwnsOne("Web.Domain.Restaurants.OpeningHours", "Wednesday", b2 =>
                                {
                                    b2.Property<Guid>("OpeningTimesRestaurantId")
                                        .HasColumnType("uuid");

                                    b2.Property<TimeSpan?>("Close")
                                        .HasColumnType("interval")
                                        .HasColumnName("wednesday_close");

                                    b2.Property<TimeSpan>("Open")
                                        .HasColumnType("interval")
                                        .HasColumnName("wednesday_open");

                                    b2.HasKey("OpeningTimesRestaurantId");

                                    b2.ToTable("restaurants");

                                    b2.WithOwner()
                                        .HasForeignKey("OpeningTimesRestaurantId");
                                });

                            b1.Navigation("Friday");

                            b1.Navigation("Monday");

                            b1.Navigation("Saturday");

                            b1.Navigation("Sunday");

                            b1.Navigation("Thursday");

                            b1.Navigation("Tuesday");

                            b1.Navigation("Wednesday");
                        });

                    b.Navigation("Address");

                    b.Navigation("Coordinates");

                    b.Navigation("OpeningTimes");
                });

            modelBuilder.Entity("Web.Domain.Users.User", b =>
                {
                    b.OwnsOne("Web.Domain.Address", "DeliveryAddress", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("city");

                            b1.Property<string>("Line1")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_line1");

                            b1.Property<string>("Line2")
                                .HasColumnType("text")
                                .HasColumnName("address_line2");

                            b1.Property<string>("Postcode")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("postcode");

                            b1.HasKey("UserId");

                            b1.ToTable("users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("DeliveryAddress");
                });

            modelBuilder.Entity("Web.Domain.Baskets.Basket", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Web.Domain.Menus.Menu", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("Web.Domain.Menus.MenuCategory", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Web.Domain.Orders.Order", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
